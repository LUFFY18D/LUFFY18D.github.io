<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JavaScript学习笔记（第一弹:变量声明）</title>
    <url>/2021/04/24/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E7%AC%AC%E4%B8%80%E5%BC%B9-%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E%EF%BC%89/</url>
    <content><![CDATA[<h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><h4 id="1、var"><a href="#1、var" class="headerlink" title="1、var"></a>1、var</h4><p>var声明变量可以重复声明。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a&#x3D;1;</span><br><span class="line">var a&#x3D;2;&#x2F;&#x2F;a值为2，不会报错。</span><br></pre></td></tr></table></figure>
<h5 id="1、1作用域"><a href="#1、1作用域" class="headerlink" title="1、1作用域"></a>1、1作用域</h5><p>使用var声明变量的时候，声明的变量作用域是函数作用域，这是相对于let的块作用域来说的。<br>函数作用域即声明的变量只能在本函数内访问。<br>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function test()&#123;</span><br><span class="line">	var a &#x3D; 1;&#x2F;&#x2F;变量a只能在test函数中被访问</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在函数外使用var定义的全局变量，作用域为整个程序，此时，该变量已经成为window对象的属性。可以使用window.[属性名]来访问。</p>
<h5 id="1-2声明提升（hoist）"><a href="#1-2声明提升（hoist）" class="headerlink" title="1.2声明提升（hoist）"></a>1.2声明提升（hoist）</h5><p>先来看一段代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(a);</span><br><span class="line">var a &#x3D; 1;</span><br></pre></td></tr></table></figure>
<p>可以先猜想一下，这段代码能不能运行，会不会报错。<br><br>答案是不会报错，但是结果有些奇怪。<br><br>为什么不会报错呢？<br><br>因为js有声明提升这个概念的存在，即hoist<br></p>
<h6 id="hoist-使用var定义的变量，其声明会被自动拉到该变量所在作用域的顶部"><a href="#hoist-使用var定义的变量，其声明会被自动拉到该变量所在作用域的顶部" class="headerlink" title="hoist:使用var定义的变量，其声明会被自动拉到该变量所在作用域的顶部"></a>hoist:使用var定义的变量，其声明会被自动拉到该变量所在作用域的顶部<br></h6><p>虽然a变量是在使用它后才声明的，但由于hoist，其声明被自动提升到console.log之前了,所以并不会报错。但是结果不是我们预期的。<br><br>我们的本意可能是想输入变量a的值，但这是无法做到的，它只会输出undefined。<br>这是因为，变量的声明可以提升，但是初始化是不能提升的。也就是说使用a变量的时候，它是处在<b>已定义，但未初始化</b>的状态，其值自然就是undefined。</p>
<h4 id="2、let"><a href="#2、let" class="headerlink" title="2、let"></a>2、let</h4><p>let声明变量<b>不能</b>重复声明。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let a&#x3D;1;</span><br><span class="line">let a&#x3D;2;&#x2F;&#x2F;会报错，重复声明了</span><br></pre></td></tr></table></figure>
<h5 id="2-1作用域"><a href="#2-1作用域" class="headerlink" title="2.1作用域"></a>2.1作用域</h5><p>let声明的变量，其作用域是块作用域。即：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(true)&#123;</span><br><span class="line">	let a&#x3D;1;</span><br><span class="line">   console.log(a);&#x2F;&#x2F;输出1</span><br><span class="line">&#125;</span><br><span class="line">console.log(a);&#x2F;&#x2F;报错，a没有定义</span><br></pre></td></tr></table></figure>
<p>注意：使用let全局定义的变量，也不会成为window对象的属性，不能通过window.[属性名]的方式被访问到。</p>
<h5 id="2-2全局声明"><a href="#2-2全局声明" class="headerlink" title="2.2全局声明"></a>2.2全局声明</h5><p>使用let声明的变量，不会在作用域中被提升。<br><br>当提前使用let声明的变量的时候，会出现<b>“暂时性死区”</b>（会报错）。</p>
<h5 id="2-3for循环中的var和let"><a href="#2-3for循环中的var和let" class="headerlink" title="2.3for循环中的var和let"></a>2.3for循环中的var和let</h5><p>如果有这样一段代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(var i &#x3D; 0;i &lt; 5;i ++)&#123;</span><br><span class="line">	setTimeout(function()&#123;</span><br><span class="line">    	console.log(i);</span><br><span class="line">    &#125;,0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们的本意是想依次输出0 1 2 3 4,但实际输出的确实5 5 5 5 5。这是因为setTimeout是异步任务，是存放在异步队列中执行的，而for循环代码是同步任务，是存放在主线程里面执行的。当程序执行完主线程的同步任务后，才会去执行异步队列中的异步任务。而for循环结束后，变量i的值就变成了5，所以setTimeout会输出5个5。<br><br>说句题外话，以下四种任务会被放在异步队列中执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、setTimeout和setInterval</span><br><span class="line">2、DOM事件</span><br><span class="line">3、ES6中的promise</span><br><span class="line">4、ajax异步请求</span><br></pre></td></tr></table></figure>
<p>有趣的是，当把上面的代码改成这样后：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(var i &#x3D; 0;i &lt; 5;i ++)&#123;</span><br><span class="line">	setTimeout(console.log(i),0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果就是正常的0 1 2 3 4了。这是因为console.log(i)是一个函数执行，是和for循环一样同步执行的，而前面setTimeout中的第一个参数，是一个函数定义。就是函数定义和函数执行的区别。<br><br>再来看下let效果如何：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(let i &#x3D; 0;i &lt; 5;i ++)&#123;</span><br><span class="line">	setTimeout(function()&#123;</span><br><span class="line">    	console.log(i);</span><br><span class="line">    &#125;,0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>它的结果是正常的，输出了0 1 2 3 4。这是因为let定义的变量是块作用域，javascript会为每次迭代生成一个新的迭代变量，setTimeout引用的也都是不同迭代变量，所以输出的是期望的值。</p>
<h4 id="3、const"><a href="#3、const" class="headerlink" title="3、const"></a>3、const</h4><p>const的行为与let基本相同，唯一一个区别是在声明变量的时候必须同时初始化，且初始化之后，想要修改该变量的值的时候，会报错。<br><br>需要注意的是，在for of和for in循环中，循环迭代变量可以使用const定义：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const arr &#x3D; [1,2,3,4,5];</span><br><span class="line">for(const val of arr)&#123;</span><br><span class="line">	console.log(val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是在普通for循环中，却不能使用const来定义迭代变量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const arr1 &#x3D; [1,2,3,4,5];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;会报错，应该使用let</span><br><span class="line">for(const i &#x3D; 0;i &lt; arr1.length;i ++)&#123;</span><br><span class="line">	console.log(arr1[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>ajax登录注册踩坑</title>
    <url>/2020/05/25/ajax%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C%E8%B8%A9%E5%9D%91/</url>
    <content><![CDATA[<p>今天看了cookie和session的视频，想自己来试一试，于是便做了一个登录注册和验证的demo。后端使用的是php，前端三驾马车使用ajax传输数据。主要遇到了两个坑：</p>
<h1 id="一、sql查询"><a href="#一、sql查询" class="headerlink" title="一、sql查询"></a>一、sql查询</h1><p>如下的查询语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$query &#x3D; &quot;INSERT INTO user (Username,Password,Addtime) VALUES (&#39;&#123;$_POST[&quot;user&quot;]&#125;&#39;,&#39;&#123;$_POST[&quot;pswd&quot;]&#125;&#39;,&#39;&#123;$date&#125;&#39;);&quot;;</span><br></pre></td></tr></table></figure>
<p>这里要特别注意两个点：</p>
<h2 id="1、引号"><a href="#1、引号" class="headerlink" title="1、引号"></a>1、引号</h2><p>指明表的字段名的时候，绝对！不能！用单引号引起来，不然会报sql语法错误！</p>
<h3 id="（更新）可以用单撇（-）括起来，避免与mysql关键字冲突。例：字段名为-ORDER-。"><a href="#（更新）可以用单撇（-）括起来，避免与mysql关键字冲突。例：字段名为-ORDER-。" class="headerlink" title="（更新）可以用单撇（`）括起来，避免与mysql关键字冲突。例：字段名为`ORDER`。"></a>（更新）可以用单撇（`）括起来，避免与mysql关键字冲突。例：字段名为`ORDER`。</h3><h2 id="2、还是引号"><a href="#2、还是引号" class="headerlink" title="2、还是引号"></a>2、还是引号</h2><p>指明各字段的值的时候，绝对！要！用单引号引起来，不管数据库里面是什么类型的（int、varchar。。。），一律都要用单引号引起来！</p>
<h3 id="（更新）数据库中的数字类型可以不用单引号括起来。"><a href="#（更新）数据库中的数字类型可以不用单引号括起来。" class="headerlink" title="（更新）数据库中的数字类型可以不用单引号括起来。"></a>（更新）数据库中的数字类型可以不用单引号括起来。</h3><h3 id="但是，绝对不能使用双引号。"><a href="#但是，绝对不能使用双引号。" class="headerlink" title="但是，绝对不能使用双引号。"></a>但是，绝对不能使用双引号。</h3><h1 id="二、使用post方式的ajax"><a href="#二、使用post方式的ajax" class="headerlink" title="二、使用post方式的ajax"></a>二、使用post方式的ajax</h1><p>我们使用get方式的时候，直接这样就可以了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xmlhttp.open(&quot;get&quot;,&quot;.&#x2F;validate.php&quot;,true);</span><br><span class="line">xmlhttp.send();</span><br><span class="line">xmlhttp.onreadystatechange &#x3D; function()&#123;</span><br><span class="line">            if(this.readyState &#x3D;&#x3D; 4 &amp;&amp; this.status &#x3D;&#x3D; 200)&#123;</span><br><span class="line">                var obj &#x3D; JSON.parse(this.responseText);</span><br><span class="line">                alert(obj.user+&quot;你好，注册成功！&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure>
<p>但是如果使用的是post方式的ajax，那么必须指明请求头：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var xmlhttp &#x3D; new XMLHttpRequest();</span><br><span class="line">       xmlhttp.open(&quot;get&quot;,&quot;.&#x2F;validate.php&quot;,true);</span><br><span class="line"></span><br><span class="line">       xmlhttp.setRequestHeader(&#39;content-type&#39;,&#39;application&#x2F;x-www-form-urlencoded&#39;);</span><br><span class="line">       </span><br><span class="line">       xmlhttp.send(&quot;type&#x3D;signin&amp;user&#x3D;&quot;+uv+&quot;&amp;pswd&#x3D;&quot;+pv);</span><br><span class="line"></span><br><span class="line">       xmlhttp.onreadystatechange &#x3D; function()&#123;</span><br><span class="line">           if(this.readyState &#x3D;&#x3D; 4 &amp;&amp; this.status &#x3D;&#x3D; 200)&#123;</span><br><span class="line">               var obj &#x3D; JSON.parse(this.responseText);</span><br><span class="line">               alert(obj.user+&quot;你好，注册成功！&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br></pre></td></tr></table></figure>
<p><b>也就是代码中的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xmlhttp.setRequestHeader(&#39;content-type&#39;,&#39;application&#x2F;x-www-form-urlencoded&#39;);</span><br></pre></td></tr></table></figure>
<p>不然的话，会一直提示$_POST数组的下标不存在！<br></b></p>
]]></content>
  </entry>
  <entry>
    <title>jdbcUtils 1.0</title>
    <url>/2020/06/10/jdbcUtils-1-0/</url>
    <content><![CDATA[<p>使用jdbc连接数据库的时候，总是要获取Connection，这样很多代码都是重复的，因此自己写一个getConnection，实现相应功能。<br/><br>为了可重用，四大参数：1、驱动类名，2、url，3、数据库账号，4、数据库密码都写在一个properties文件中，在程序中加载。<br/><br>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;该文件貌似该放在和调用类一个包中,不然加载properties文件会失败</span><br><span class="line">package luffy18d.github.io;</span><br><span class="line"></span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">public class jdbcUtils &#123;</span><br><span class="line">    public static Properties props &#x3D; null;</span><br><span class="line">    static &#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            &#x2F;&#x2F;获取配置文件内容</span><br><span class="line">            InputStream in &#x3D; jdbcUtils.class.getClassLoader().getResourceAsStream(&quot;dbconfig.properties&quot;);</span><br><span class="line">            props &#x3D; new Properties();</span><br><span class="line">            props.load(in);</span><br><span class="line">            &#x2F;&#x2F;加载驱动类</span><br><span class="line">            Class.forName(props.getProperty(&quot;driverClassName&quot;));</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static Connection getConnection() throws SQLException &#123;</span><br><span class="line"></span><br><span class="line">        return DriverManager.getConnection(props.getProperty(&quot;url&quot;),</span><br><span class="line">                props.getProperty(&quot;userName&quot;),</span><br><span class="line">                props.getProperty(&quot;password&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>static块中的代码在类加载的时候会执行，且只执行一次，这是因为该块的代码是不需要重复执行的，且io操作也费时，影响性能。</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/04/17/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>mysql导入导出命令</title>
    <url>/2020/06/08/mysql%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E5%91%BD%E4%BB%A4-1/</url>
    <content><![CDATA[<h1 id="mysql导出sql文件"><a href="#mysql导出sql文件" class="headerlink" title="mysql导出sql文件"></a>mysql导出sql文件</h1><h2 id="1、导出的sql文件包含数据"><a href="#1、导出的sql文件包含数据" class="headerlink" title="1、导出的sql文件包含数据"></a>1、导出的sql文件包含数据</h2><p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p123 mydb&gt;d:&#x2F;mydb.sql</span><br></pre></td></tr></table></figure>

<h2 id="2、导出的sql文件不包含数据"><a href="#2、导出的sql文件不包含数据" class="headerlink" title="2、导出的sql文件不包含数据"></a>2、导出的sql文件<font style="color:red">不</font>包含数据</h2><p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -p123 -d -add-drop-table mydb&gt;d:&#x2F;mydb.sql</span><br></pre></td></tr></table></figure>
<h3 id="d：表示没有数据"><a href="#d：表示没有数据" class="headerlink" title="-d：表示没有数据"></a>-d：表示没有数据</h3><h3 id="add-drop-table-在create语句之前增加drop-table（默认参数）防止表名重复"><a href="#add-drop-table-在create语句之前增加drop-table（默认参数）防止表名重复" class="headerlink" title="-add-drop-table:在create语句之前增加drop table（默认参数）防止表名重复"></a>-add-drop-table:在create语句之前增加drop table（默认参数）防止表名重复<br/></h3><h3 id="可以根据需要使用–skip-add-drop-table参数。"><a href="#可以根据需要使用–skip-add-drop-table参数。" class="headerlink" title="可以根据需要使用–skip-add-drop-table参数。"></a>可以根据需要使用–skip-add-drop-table参数。</h3><h1 id="mysql导入sql文件"><a href="#mysql导入sql文件" class="headerlink" title="mysql导入sql文件"></a>mysql导入sql文件</h1><p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p123 mydb&lt;d:&#x2F;mydb.sql</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p123&#x2F;&#x2F;登录</span><br><span class="line">use mydb</span><br><span class="line">source d:&#x2F;mydb.sql</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>npm</title>
    <url>/2020/04/17/npm-install%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<p>之所以创建个人博客是因为既可以锻炼自己的操作能力，又可以倒逼自己多学习，多记录。<br>话不多说，马上开始今天的正题,由于本人是新手，如果有错误的地方还请指出并理解，理解万岁！</p>
<h2 id="npm的使用"><a href="#npm的使用" class="headerlink" title="npm的使用"></a>npm的使用</h2><p>首先介绍一下nodejs。<br>nodejs是JavaScript的运行环境，就像jre是java的运行环境一样。使用nodejs甚至还可以进行后端开发，没错，用JavaScript开发后端应用程序。<br>npm是nodejs的包管理工具，我们可以通过npm以命令行的形式，下载互联网上别人发布的JavaScript包，也可以自己实现一个功能，然后发布到网上，供别人下载使用。而且npm上的包数量非常多，功能也很丰富，所以npm非常强大。</p>
<h3 id="npm的安装"><a href="#npm的安装" class="headerlink" title="npm的安装"></a>npm的安装</h3><p>npm是nodejs的包管理工具，所以只要下载安装了nodejs就可以直接用。</p>
<h3 id="npm常用命令"><a href="#npm常用命令" class="headerlink" title="npm常用命令"></a>npm常用命令</h3><h4 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install &lt;Moudle Name&gt; [-g]</span><br></pre></td></tr></table></figure>
<p>-g是可选的，加了就是全局安装，所有项目都能用，不加就是本地安装。<br>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
<h4 id="删除模块"><a href="#删除模块" class="headerlink" title="删除模块"></a>删除模块</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm uninstall &lt;Moudle Name&gt; </span><br></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-cli</span><br></pre></td></tr></table></figure>
<h4 id="更新模块"><a href="#更新模块" class="headerlink" title="更新模块"></a>更新模块</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm update &lt;Moudle Name&gt; [-g]</span><br></pre></td></tr></table></figure>
<p>例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm update hexo-cli</span><br></pre></td></tr></table></figure>
<h3 id="关于npm-install"><a href="#关于npm-install" class="headerlink" title="关于npm install"></a>关于npm install</h3><p>当我们新建了一个前端项目的时候，它通常还会依赖很多的包才能运行，npm install就是这个作用。我们进入项目目录，然后运行npm install，并没有加上Moudle Name，npm就会去查询项目中package.json里dependences字段所依赖的包，下载到本地。<br><br>其实之前我一直不知道npm install安装的是什么东西，后来问了一位学长，恍然大悟。</p>
<h2 id="创建并运行vue项目"><a href="#创建并运行vue项目" class="headerlink" title="创建并运行vue项目"></a>创建并运行vue项目</h2><p>下面运用所学知识来运行vue项目。<br><br>首先打开cmd安装vue脚手架</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install vue-cli -g</span><br></pre></td></tr></table></figure>
<p>然后切换到项目目录，初始化项目</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue init webpack vueone</span><br></pre></td></tr></table></figure>
<p><img src="/img/first.png" alt="运行结果"><br>然后进入vueone目录，安装依赖的包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>最后运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>
<p>打开浏览器，输入提示的网址，项目就跑起来啦！</p>
<h2 id="额外的收获"><a href="#额外的收获" class="headerlink" title="额外的收获"></a>额外的收获</h2><p>通过做这篇博客，我还顺带学习了下markdown语法，感觉好强大，而且比html美观多了~</p>
]]></content>
  </entry>
  <entry>
    <title>servlet中文传输</title>
    <url>/2020/05/27/servlet%E4%B8%AD%E6%96%87%E4%BC%A0%E8%BE%93/</url>
    <content><![CDATA[<p>先贴上代码：<br>这里做的是一个jsp页面向servlet分别GET和POST中文,servlet再将中文回显到jsp页面的实例。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package luffy18d.github.io.img;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.io.IOUtils;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class ImgOutput extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        &#x2F;&#x2F;从浏览器获取中文并回显中文</span><br><span class="line">        String name &#x3D; req.getParameter(&quot;username&quot;);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        byte[] bytes2 &#x3D; name.getBytes();&#x2F;&#x2F;转换成字节码再输出</span><br><span class="line">        resp.getOutputStream().write(bytes2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        req.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">        String name &#x3D; req.getParameter(&quot;username&quot;);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        byte[] bytes3 &#x3D; name.getBytes();&#x2F;&#x2F;转换成字节码再输出</span><br><span class="line">        resp.getOutputStream().write(bytes3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h6 id="使用resp-getOutputStream以字节流向jsp网页输出中文的时候，要先将中文转换成字节数组，再输出。"><a href="#使用resp-getOutputStream以字节流向jsp网页输出中文的时候，要先将中文转换成字节数组，再输出。" class="headerlink" title="使用resp.getOutputStream以字节流向jsp网页输出中文的时候，要先将中文转换成字节数组，再输出。"></a>使用resp.getOutputStream以字节流向jsp网页输出中文的时候，要先将中文转换成字节数组，再输出。<br></h6><h6 id="使用resp-getWriter以字符流向jsp网页输出中文的时候，不用将中文转换成字节数组，但是要加上这么一句："><a href="#使用resp-getWriter以字符流向jsp网页输出中文的时候，不用将中文转换成字节数组，但是要加上这么一句：" class="headerlink" title="使用resp.getWriter以字符流向jsp网页输出中文的时候，不用将中文转换成字节数组，但是要加上这么一句："></a>使用resp.getWriter以字符流向jsp网页输出中文的时候，不用将中文转换成字节数组，但是要加上这么一句：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">resp.setContentType(&quot;text&#x2F;html;charset&#x3D;utf-8&quot;);</span><br></pre></td></tr></table></figure>
<h6 id="也就是设置相应数据的字符编码为utf-8"><a href="#也就是设置相应数据的字符编码为utf-8" class="headerlink" title="也就是设置相应数据的字符编码为utf-8."></a>也就是设置相应数据的字符编码为utf-8.</h6>]]></content>
  </entry>
  <entry>
    <title>servlet之网站访问量统计</title>
    <url>/2020/05/24/servlet%E4%B9%8B%E7%BD%91%E7%AB%99%E8%AE%BF%E9%97%AE%E9%87%8F%E7%BB%9F%E8%AE%A1/</url>
    <content><![CDATA[<p>这是我学习javaweb中的servlet所做的小程序（其实也是教程里面的例子）。</p>
<h1 id="talk-is-cheap，show-you-the-code"><a href="#talk-is-cheap，show-you-the-code" class="headerlink" title="talk is cheap，show you the code"></a>talk is cheap，show you the code</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package luffy18d.github.io;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletContext;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line">public class cntServlet extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        ServletContext app &#x3D; this.getServletContext();</span><br><span class="line">        Integer count &#x3D; (Integer)app.getAttribute(&quot;count&quot;);</span><br><span class="line">        if(count &#x3D;&#x3D; null)</span><br><span class="line">        &#123;</span><br><span class="line">            app.setAttribute(&quot;count&quot;,1);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            app.setAttribute(&quot;count&quot;,count + 1);</span><br><span class="line">        &#125;</span><br><span class="line">        PrintWriter pw &#x3D; resp.getWriter();</span><br><span class="line">        pw.print(&quot;&lt;h1&gt;&quot; + count + &quot;&lt;&#x2F;h1&gt;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这是web.xml中的一些相关配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">   &lt;servlet-name&gt;cnt&lt;&#x2F;servlet-name&gt;</span><br><span class="line">   &lt;servlet-class&gt;luffy18d.github.io.cntServlet&lt;&#x2F;servlet-class&gt;</span><br><span class="line">&lt;&#x2F;servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">   &lt;servlet-name&gt;cnt&lt;&#x2F;servlet-name&gt;</span><br><span class="line">   &lt;url-pattern&gt;&#x2F;cntServlet&lt;&#x2F;url-pattern&gt;</span><br><span class="line">&lt;&#x2F;servlet-mapping&gt;</span><br></pre></td></tr></table></figure>
<h1 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h1><p>要想统计网站的访问量，必须在全站范围内构建一个共同可读可写的变量。这里使用的是servlet中的ServletContext，它是全项目唯一的。用到的方法有该对象的getAttribute和setAttribute。<br><br>首先通过继承HttpServlet类来获取相关的方法，然后调用本对象的getServletContext方法来获取项目唯一的ServletContext对象。<br>然后使用ServletContext对象中的getAttribute方法获取名字为count的属性的值。<br>如果值为null，那么说明这是第一次访问，项目中还没有这个属性，就使用setAttribute方法将count置为1；如果值不为null，那么说明这不是第一次访问，同样使用setAttribute方法，设置count的值为count + 1.</p>
<h1 id="步骤详解"><a href="#步骤详解" class="headerlink" title="步骤详解"></a>步骤详解</h1><h2 id="1、打包以及引入"><a href="#1、打包以及引入" class="headerlink" title="1、打包以及引入"></a>1、打包以及引入</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package luffy18d.github.io;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletContext;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.PrintWriter;</span><br></pre></td></tr></table></figure>
<p>这个没什么好说的。</p>
<h2 id="2、查询count属性"><a href="#2、查询count属性" class="headerlink" title="2、查询count属性"></a>2、查询count属性</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class cntServlet extends HttpServlet &#123;</span><br><span class="line">	@Override</span><br><span class="line">	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        ServletContext app &#x3D; this.getServletContext();</span><br><span class="line">        Integer count &#x3D; (Integer)app.getAttribute(&quot;count&quot;);</span><br></pre></td></tr></table></figure>
<p>因为cntServlet类继承了HttpServlet，所以相关方法都有了，我们只需要实现doGet方法即可。通过对象本身的getServletContext方法，获取ServletContext对象，然后查询count属性，因为getAttribute方法返回的是Object类型，所以要强制转换成Integer类型。</p>
<h2 id="3、根据count的值执行不同的操作"><a href="#3、根据count的值执行不同的操作" class="headerlink" title="3、根据count的值执行不同的操作"></a>3、根据count的值执行不同的操作</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if(count &#x3D;&#x3D; null)</span><br><span class="line">&#123;</span><br><span class="line">     app.setAttribute(&quot;count&quot;,1);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">     app.setAttribute(&quot;count&quot;,count + 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果count为null，说明是第一次访问，使用setAttribute方法给count属性置1.<br>如过count不为null，说明不是第一次访问，使用setAttribute给count加1.</p>
<h2 id="在浏览器中输出"><a href="#在浏览器中输出" class="headerlink" title="在浏览器中输出"></a>在浏览器中输出</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PrintWriter pw &#x3D; resp.getWriter();</span><br><span class="line">pw.print(&quot;&lt;h1&gt;&quot; + count + &quot;&lt;&#x2F;h1&gt;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用response对象向浏览器输出count属性。<br><br>注：resp就是doGet参数中的HttpServletResponse类型的resp。</p>
<h2 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">   &lt;servlet-name&gt;cnt&lt;&#x2F;servlet-name&gt;</span><br><span class="line">   &lt;servlet-class&gt;luffy18d.github.io.cntServlet&lt;&#x2F;servlet-class&gt;</span><br><span class="line">&lt;&#x2F;servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">   &lt;servlet-name&gt;cnt&lt;&#x2F;servlet-name&gt;</span><br><span class="line">   &lt;url-pattern&gt;&#x2F;cntServlet&lt;&#x2F;url-pattern&gt;</span><br><span class="line">&lt;&#x2F;servlet-mapping&gt;</span><br></pre></td></tr></table></figure>
<p>要设置两个标签：servlet和servlet-mapping.<br>servlet标签要定义servlet-name和servlet-class，name可以随便取，class要写完整的包名和类名。<br><br>servlet-mapping也要定义servlet-name并且值要和servlet中的name相同，这样服务器才找得到对应的servlet进行显示，url-pattern设置的是访问servlet的路径，我一般习惯项目目录之后直接跟servlet名称。<br><br>注：url-pattern必须以/开头。</p>
]]></content>
  </entry>
  <entry>
    <title>servlet实现的三种方式</title>
    <url>/2020/05/24/servlet%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>要想使用servlet，可以通过以下三种方式。</p>
<h1 id="一、实现Servlet接口"><a href="#一、实现Servlet接口" class="headerlink" title="一、实现Servlet接口"></a>一、实现Servlet接口</h1><p>接口所在包：javax.servlet.Servlet</p>
<h2 id="需要实现的函数"><a href="#需要实现的函数" class="headerlink" title="需要实现的函数"></a>需要实现的函数</h2><h4 id="1）init-ServletConfig-config"><a href="#1）init-ServletConfig-config" class="headerlink" title="1）init(ServletConfig config)"></a>1）init(ServletConfig config)</h4><h4 id="2）getServletInfo"><a href="#2）getServletInfo" class="headerlink" title="2）getServletInfo()"></a>2）getServletInfo()</h4><h4 id="3）getServletConfig"><a href="#3）getServletConfig" class="headerlink" title="3）getServletConfig()"></a>3）getServletConfig()</h4><h4 id="4）service-ServletRequest-req-ServletResponse-res"><a href="#4）service-ServletRequest-req-ServletResponse-res" class="headerlink" title="4）service(ServletRequest req, ServletResponse res)"></a>4）service(ServletRequest req, ServletResponse res)</h4><h4 id="5）destroy"><a href="#5）destroy" class="headerlink" title="5）destroy()"></a>5）destroy()</h4><p>实现代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package luffy18d.github.io;</span><br><span class="line"></span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Aservlet implements Servlet &#123;</span><br><span class="line">	  private ServletConfig config;</span><br><span class="line">    @Override</span><br><span class="line">    public void init(ServletConfig servletConfig) throws ServletException &#123;</span><br><span class="line">        System.out.println(&quot;init....&quot;);</span><br><span class="line">        this.config &#x3D; servletConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public ServletConfig getServletConfig() &#123;</span><br><span class="line">        System.out.println(&quot;getServletConfig....&quot;);</span><br><span class="line">        return this.config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void service(ServletRequest servletRequest, ServletResponse servletResponse) throws ServletException, IOException &#123;</span><br><span class="line">        System.out.println(&quot;service....&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getServletInfo() &#123;</span><br><span class="line">        System.out.println(&quot;getServletInfo....&quot;);</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">        System.out.println(&quot;destroy....&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要注意的是：其中包含servlet的三个生命周期函数init、service和destroy。<br><br>这三个方法都不是手动调用，而是tomcat服务器帮我们调用。<br><br>其中init方法在servlet被创建之后马上调用，service方法每访问一次servlet就会执行一次，destroy方法在servlet被销毁之前被调用。<br><br>getServletInfo方法可以写一些servlet的相关信息，供别人或自己调用，但是意义不大。<br><br>getServletConfig方法可以获取一些配置信息，比如web.xml里定义的参数（parameters）。该方法返回值为ServletConfig类型，init方法的参数也是ServletConfig类型的，因此，getServletConfig方法的返回值，可以通过init方法，借由一个成员变量给出。</p>
<h1 id="二、继承GenericServlet类"><a href="#二、继承GenericServlet类" class="headerlink" title="二、继承GenericServlet类"></a>二、继承GenericServlet类</h1><p>抽象类所在包：javax.servlet.GenericServlet<br><br>该类在Servlet接口的基础上，实现了除service方法之外的其他四个方法，为程序提供了便利，比如我们不需要手动增加config成员变量。</p>
<blockquote>
<p>getServletConfig方法的返回值，可以通过init方法，借由一个成员变量给出。<br><br>但是使用GenericServlet，就没有这个顾虑了。</p>
</blockquote>
<h1 id="三、继承HttpServlet类"><a href="#三、继承HttpServlet类" class="headerlink" title="三、继承HttpServlet类"></a>三、继承HttpServlet类</h1><p>抽象类所在包：javax.servlet.http.HttpServlet<br>只需要实现doGet方法和doPost方法，实现实例参考上一篇博客。</p>
]]></content>
  </entry>
  <entry>
    <title>translate赋百分值</title>
    <url>/2020/05/26/translate%E8%B5%8B%E7%99%BE%E5%88%86%E5%80%BC/</url>
    <content><![CDATA[<p>当我们需要将内容垂直水平居中的时候，可能会用到这样的方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.container&#123;</span><br><span class="line">            position:absolute;</span><br><span class="line">            top:50vh;</span><br><span class="line">            left:50vw;</span><br><span class="line">            width:500px;</span><br><span class="line">            height:500px;</span><br><span class="line">            transform:translate(-50%,-50%);</span><br><span class="line">            -webkit-transform:translate(-50%,-50%);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>需要注意的是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">width:500px;</span><br><span class="line">height:500px;</span><br></pre></td></tr></table></figure>
<h6 id="给元素设置宽高这两句一定不能省略，不然后面的transform-translate-就只能接收px值，给它传-50-这种百分值是无效的。"><a href="#给元素设置宽高这两句一定不能省略，不然后面的transform-translate-就只能接收px值，给它传-50-这种百分值是无效的。" class="headerlink" title="给元素设置宽高这两句一定不能省略，不然后面的transform:translate()就只能接收px值，给它传-50%这种百分值是无效的。"></a>给元素设置宽高这两句一定不能省略，不然后面的transform:translate()就只能接收px值，给它传-50%这种百分值是无效的。</h6>]]></content>
  </entry>
  <entry>
    <title>父页面访问子页面内容</title>
    <url>/2020/04/27/%E7%88%B6%E9%A1%B5%E9%9D%A2%E8%AE%BF%E9%97%AE%E5%AD%90%E9%A1%B5%E9%9D%A2%E5%86%85%E5%AE%B9/</url>
    <content><![CDATA[<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>今天在做web系统开发的期末大作业的时候，遇到了一个应用场景。<br><br>我在网站首页中使用iframe引入了一个子页面，而且这个子页面的内容要随着我点击header中相应的栏目来改变，也就是动态修改iframe的src属性。<br><br>那么问题来了，变动的src中的内容高度不是一样的，有的很高，有的不是。那么，我如何做到iframe的高度和src指向的页面的内容高度一致呢？换句话说：如何做到iframe的高度的自适应？</p>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>通过在网上查找，我发现了一种解决方案。<br><br>可以在父页面获取到iframe元素，然后设置它的高度为iframe的contentDocument对象的document.scrollHeight。<br><br>也就是下面的代码：<br></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iframe.height &#x3D; iframe.contentDocument.document.scrollHeight;</span><br></pre></td></tr></table></figure>
<p>原以为过程应该很顺利，但是没想到浏览器报错了。<br><br><img src="/img/err.jpg" alt="错误"><br>经过调试，发现错误是从这里开始的：<br></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(iframe.contentDocument);&#x2F;&#x2F;输出null！</span><br></pre></td></tr></table></figure>
<p>于是，我又在网上找原因，最后得到的结果是：</p>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><h5 id="chrome因为跨域的问题，contentDocument-document是处于deny状态的，没有办法获取到！（基于chromium内核的浏览器都一个样）"><a href="#chrome因为跨域的问题，contentDocument-document是处于deny状态的，没有办法获取到！（基于chromium内核的浏览器都一个样）" class="headerlink" title="chrome因为跨域的问题，contentDocument.document是处于deny状态的，没有办法获取到！（基于chromium内核的浏览器都一个样）"></a>chrome因为跨域的问题，contentDocument.document是处于deny状态的，没有办法获取到！（基于chromium内核的浏览器都一个样）<br></h5><h5 id="可以通过跨域操作解决，但是网站必须在线上，或者开启一个服务，也就是说本地纯html-css-js是无法解决的！"><a href="#可以通过跨域操作解决，但是网站必须在线上，或者开启一个服务，也就是说本地纯html-css-js是无法解决的！" class="headerlink" title="可以通过跨域操作解决，但是网站必须在线上，或者开启一个服务，也就是说本地纯html+css+js是无法解决的！"></a>可以通过跨域操作解决，但是网站必须在线上，或者开启一个服务，也就是说本地纯html+css+js是无法解决的！</h5>]]></content>
  </entry>
</search>
